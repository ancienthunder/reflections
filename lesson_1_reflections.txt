Why diff?

1. Makes changes conspicuous.
2. Changes are usually that which will break the code.
3. Once changes are identified we can zero in on the problem and find a suitable solution.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

Any and all changes are saved. Many different versions can correspond to many different requirements.
If they can be restored it reduces a lot of work.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

Pros:
	- Flexibility.
	- Can mean each commit point is meaningful and usually a working code.
Cons:
	- User error.
	- Maybe unable to commit when required and could lose everything.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

They are both application oriented. Applications for google docs are mainly dependent on editing and writing a single document, not code.
While git is mainly for inter-related files of code whose status needs to be maintained simultaneously.

How can you use the commands git log and git diff to view the history of files?

	= git log
		git log is used to find the history of commits made once cded into the repository
	= git diff
		git diff <file1> <file2> is used to find the difference between the two files.


How might using version control make you more confident to make changes that could break something?
	I know I can restore it to a version where it was working.

Now that you have your workspace set up, what do you want to try using Git for?
	Projects and coding.
